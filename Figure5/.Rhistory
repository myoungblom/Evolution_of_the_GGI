# FC-IGRs
rna.data$EGC <- paste(rna.data$EG,rna.data$Condition,sep="-")
ggplot(rna.data,aes(x=Passage,y=R.percint,color=EGC)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=Passage,y=R.percint,color=EGC)) + geom_boxplot() + theme_minimal()+
geom_jitter()
ggplot(rna.data,aes(x=Passage,y=R.percint,color=EGC)) + geom_boxplot() + theme_minimal()+
geom_jitter(size=0.4)
ggplot(rna.data,aes(x=Passage,y=R.percint,color=EGC)) + geom_boxplot() + theme_minimal()+
geom_jitter(size=0.75)
?geom_jitter
ggplot(rna.data,aes(x=Passage,y=R.percint,color=EGC)) + geom_boxplot() + theme_minimal()+
geom_jitter(size=0.75,width=1,height=1)
ggplot(rna.data,aes(x=Passage,y=R.percint,color=EGC)) + geom_boxplot() + theme_minimal()+
geom_jitter(size=0.75,width=0.1,height=1)
ggplot(rna.data,aes(x=ECG,y=R.percint,color=Passage)) + geom_boxplot() + theme_minimal()+
geom_jitter(size=0.75,width=0.1,height=1)
ggplot(rna.data,aes(x=EGC,y=R.percint,color=Passage)) + geom_boxplot() + theme_minimal()+
geom_jitter(size=0.75,width=0.1,height=1)
ggplot(rna.data,aes(x=R.totalaln,y=R.percint)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=R.totalaln,y=R.percint,color=Condition)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=R.totalaln,y=R.percint,color=EGC)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=FC.genes,y=FC.IGRs,color=EGC)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=FC.genes,y=FC.overlapping.1,color=EGC)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=EGC,y=R.percint,color=Passage)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=EGC,y=B.duprate,color=Passage)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=B.duprate,y=R.percint,color=Passage)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=B.duprate,y=R.percint,color=Condition)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=B.duprate,y=R.percint,color=EGC)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=B.duprate,y=R.percint,color=EGC)) + geom_point() + theme_minimal() +xlim(0,100)
ggplot(rna.data,aes(x=EGC,y=B.duprate,color=Passage)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=EGC,y=R.percint,color=Passage)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=B.duprate,y=R.percint,color=EGC)) + geom_point() + theme_minimal() +xlim(0,100)
ggplot(rna.data,aes(x=B.duprate,y=R.percint,color=EGC)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=EGC,y=R.percint,color=Passage)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=EGC,y=R.percint,color=Passage)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=B.duprate,y=R.percint,color=EGC,shape=Genotype)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=FC.genes,y=FC.overlapping.1,color=EGC)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=EGC,y=R.percint,color=Passage)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=EGC,y=B.duprate,color=Passage)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=EGC,y=R.percint,color=Passage)) + geom_boxplot() + theme_minimal()
ggplot(rna.data,aes(x=FC.genes,y=FC.overlapping.1,color=EGC)) + geom_point() + theme_minimal()
require(ggplot2)
require(plyr)
require(readr)
require(GGally)
require(dplyr)
require(mlbench)
require(ggcorrplot)
data <- read.csv("~/Desktop/2022.02.08_eDNA-eRNA/expevo_e-g_RNA-DNA_ALLDATA.csv",header=T)
data$R.propexon <- data$R.alntogenes/data$R.totalaln
View(data)
rna.data <- data[data$Type == "RNA",]
ggplot(rna.data,aes(x=RNAquant,y=R.percint,color=Genotype)) + geom_point() + theme_minimal()
ggplot(rna.data,aes(x=RNAquant,y=R.percint,color=Condition)) + geom_point() + theme_minimal()
require(ggplot2)
data <- read.delim("~/Desktop/count_summaries.txt",sep="\t",header=T)
data$GC <- paste(data$Genotype,data$Condition,sep="-")
ggplot(data,aes(x=GC,y=no_feature)) + geom_boxplot() + theme_minimal()
ggplot(data,aes(x=GC,y=ambiguous)) + geom_boxplot() + theme_minimal()
ggplot(data,aes(x=GC,y=too_low_aQual)) + geom_boxplot() + theme_minimal()
ggplot(data,aes(x=GC,y=not_aligned)) + geom_boxplot() + theme_minimal()
data <- read.table("~/Desktop/2022.02.23_denovo_transcriptome/47-E-B_trinity_RSEM_matrices.gene.TPM.not_cross_norm.counts_by_min_TPM", header=T)
plot(data, xlim=c(-100,0), ylim=c(0,100000), t='b')
plot(data, t='b')
plot(data, xlim=c(-500,0) t='b')
plot(data, xlim=c(-5000,0), t='b')
plot(data, xlim=c(-2000,0), t='b')
plot(data, xlim=c(-1000,0), t='b')
data.2 <- read.table("~/Desktop/2022.02.23_denovo_transcriptome/47-E-B_trinity_RSEM_matrices.isoform.TPM.not_cross_norm.counts_by_min_TPM", header=T)
plot(data, xlim=c(-1000,0), t='b', color="red")
?plot
plot(data, xlim=c(-1000,0), t='b', color="red")
plot(data.2, t='b')
plot(data.2, xlim=c(-1000,0) t='b')
plot(data.2, xlim=c(-1000,0), t='b')
require(ggplot2)
require(ggpubr)
ggplot(data,aes(x=neg_min_tpm,y=num_features)) + geom_point()
ggplot(data,aes(x=neg_min_tpm,y=num_features)) + geom_point() + xlim(-1000,0)
ggplot(data,aes(x=neg_min_tpm,y=num_features)) + geom_point() + xlim(-1000,0) + theme_minimal()
ggplot(data.2,aes(x=neg_min_tpm,y=num_features)) + geom_point() + xlim(-1000,0) + theme_minimal()
genes <- ggplot(data,aes(x=neg_min_tpm,y=num_features)) + geom_point() + xlim(-1000,0) + theme_minimal()
isoforms <- ggplot(data.2,aes(x=neg_min_tpm,y=num_features)) + geom_point() + xlim(-1000,0) + theme_minimal()
ggarrange(genes,isoforms)
require(ggplot2)
data <- read.csv("~/Desktop/2022.03.15_rnaseqRedo/qualimap_exonic_all.csv",header=T)
require(dplyr)
?melt
require(reshape2)
?melt
View(data)
data.melt <- melt(data, id.vars=c("sample","genotype","condition"),measure.vars=c("exonicOG","nofeatOG","exonic","nofeat"),
variable.name="CountType", value.name="Count")
View(data.melt)
data.melt$GC <- paste(data.melt$genotype,data.melt$condition,sep="-")
ggplot(data.melt,aes(x=GC,y=Count,color=CountType)) + geom_histogram()
View(data.melt)
ggplot(data.melt,aes(x=GC,y=Count,color=CountType)) + geom_boxplot()
data.reform <- rbind(data.frame(gtf="Old",sample=data.melt$sample,genotype=data.melt$genotype,condition=data.melt$condition,
countType=data.melt$CountType,count=data.melt$Count,GC=data.melt$GC),
data.frame(gtf="New",sample=data.melt$sample,genotype=data.melt$genotype,condition=data.melt$condition,
countType=data.melt$CountType,count=data.melt$Count,GC=data.melt$GC))
View(data.reform)
data <- read.csv("~/Desktop/2022.03.15_rnaseqRedo/qualimap_exonic_all.csv",header=T)
View(data)
data.reform <- rbind(data.frame(gtf="Old",sample=data$sample,genotype=data$genotype,condition=data$condition,count=data$exonicOG),
data.frame(gtf="New",sample=data$sample,genotype=data$genotype,condition=data$condition,count=data$exonic))
View(data.reform)
data.reform$GC <- paste(data.reform$genotype,data.reform$condition,sep="-")
ggplot(data,aes(x=GC,y=Count,color=gtf,fill=gtf)) + geom_boxplot() + theme_minimal()
ggplot(data.reform,aes(x=GC,y=Count,color=gtf,fill=gtf)) + geom_boxplot() + theme_minimal()
ggplot(data.reform,aes(x=GC,y=count,color=gtf,fill=gtf)) + geom_boxplot() + theme_minimal()
ggplot(data.reform,aes(x=GC,y=count,fill=gtf)) + geom_boxplot() + theme_minimal()
data.reform$GC <- as.factor(paste(data.reform$genotype,data.reform$condition,sep="-"),levels=c("A-P","E-P","A-B","E-B")
data.reform$GC <- as.factor(paste(data.reform$genotype,data.reform$condition,sep="-"),levels=c("A-P","E-P","A-B","E-B"))
data.reform$GC <- factor(data.reform$GC,levels=c("A-P","E-P","A-B","E-B"))
ggplot(data.reform,aes(x=GC,y=count,fill=gtf)) + geom_boxplot() + theme_minimal()
data.reform <- rbind(data.frame(Annotations="Old",sample=data$sample,genotype=data$genotype,condition=data$condition,count=data$exonicOG),
data.frame(Annotations="New",sample=data$sample,genotype=data$genotype,condition=data$condition,count=data$exonic))
data.reform$GC <- paste(data.reform$genotype,data.reform$condition,sep="-")
data.reform$GC <- factor(data.reform$GC,levels=c("A-P","E-P","A-B","E-B"))
ggplot(data.reform,aes(x=GC,y=count,fill=Annotations)) + geom_boxplot() + theme_minimal()
ggplot(data.reform,aes(x=GC,y=count,fill=Annotations)) + geom_boxplot() + theme_minimal() + ylab("Percent of Reads Mapping to Features")
ggplot(data.reform,aes(x=GC,y=count,fill=Annotations)) + geom_boxplot() + theme_minimal() + ylab("Percent of Reads Mapping to Features")+
xlab("Genotype-Condition") + scale_x_discrete(labels=c("A-P"="Ancestral-Planktonic","E-P"="Evolved Planktonic","A-B"="Ancestral-Biofilm",
"E-B"="Evolved Biofilm"))
ggplot(data.reform,aes(x=GC,y=count,fill=Annotations)) + geom_boxplot() + theme_minimal() + ylab("Percent of Reads Mapping to Features")+
xlab("Genotype-Condition") + scale_x_discrete(labels=c("A-P"="Ancestral-Planktonic","E-P"="Evolved Planktonic","A-B"="Ancestral-Biofilm",
"E-B"="Evolved Biofilm"))+
theme(axis.text.x = element_text(angle=45,size=12))
genic <- ggplot(data.reform,aes(x=GC,y=count,fill=Annotations)) + geom_boxplot() + theme_minimal() + ylab("Percent of Reads Mapping to Features")+
xlab("Genotype-Condition") + scale_x_discrete(labels=c("A-P"="Ancestral-Planktonic","E-P"="Evolved Planktonic","A-B"="Ancestral-Biofilm",
"E-B"="Evolved Biofilm"))+
theme(axis.text.x = element_text(angle=45,size=12))
ggsave("~/Desktop/2022.03.15_rnaseqRedo/",genic,width=8,height=6)
genic <- ggplot(data.reform,aes(x=GC,y=count,fill=Annotations)) + geom_boxplot() + theme_minimal() + ylab("Percent of Reads Mapping to Features")+
xlab("Genotype-Condition") + scale_x_discrete(labels=c("A-P"="Ancestral-Planktonic","E-P"="Evolved Planktonic","A-B"="Ancestral-Biofilm",
"E-B"="Evolved Biofilm"))+
theme(axis.text.x = element_text(angle=45,size=12))
ggsave("~/Desktop/2022.03.15_rnaseqRedo/",genic,width=8,height=6)
ggsave("~/Desktop/2022.03.15_rnaseqRedo/genic_boxplots.pdf",genic,width=8,height=6)
library(ggplot)
Planktonic_Growth_Curve_Data <- read.csv("Desktop/Planktonic Growth Curve Data.csv")
View(Planktonic_Growth_Curve_Data)
strain540 <- Planktonic_Growth_Curve_Data[,c("X540-0","X540-4AP","X540-4BP")]
strain540 <- Planktonic_Growth_Curve_Data[,c("X540.0","X540.4AP","X540.4BP")]
View(strain540)
View(Planktonic_Growth_Curve_Data)
strain540 <- Planktonic_Growth_Curve_Data[,c("Day","X540.0","X540.4AP","X540.4BP")]
View(strain540)
vector <- c(value, value, value)
vector <- c("value", "value", "value")
vector
library(dplyr)
?melt
library(reshape2)
?melt
strain540.melt <- melt(strain540, id.vars = "Day", measure.vars = c("X540.0","X540.4AP","X540.4BP"), variable.name = "OD")
View(strain540.melt)
strain540.melt <- melt(strain540, id.vars = "Day", measure.vars = c("X540.0","X540.4AP","X540.4BP"), variable.name = "Sample")
ggplot(data=strain540.melt) + geom_point(aes(x=Day,y=value,color=Sample)) + geom_line(aes(color=Sample)) + theme_minimal()
library(ggplot2)
ggplot(data=strain540.melt) + geom_point(aes(x=Day,y=value,color=Sample)) + geom_line(aes(color=Sample)) + theme_minimal()
ggplot(data=strain540.melt) + geom_point(aes(x=Day,y=value,color=Sample)) + geom_line(aes(x=Day,y=value,color=Sample)) + theme_minimal()
ggplot(data=strain540.melt) + geom_point(aes(x=Day,y=value,color=Sample)) + geom_line(aes(x=Day,y=value,color=Sample)) +
theme_bw()
ggplot(data=strain540.melt) + geom_point(aes(x=Day,y=value,color=Sample)) + geom_line(aes(x=Day,y=value,color=Sample))
ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=1) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal()
ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal()
ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600")
?scale_x_discrete
strain540.melt$Day <- as.factor(strain540.melt$Day)
levels(strain540.melt$Day)
ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600")
strain540.melt <- melt(data=strain540, id.vars = "Day", measure.vars = c("X540.0","X540.4AP","X540.4BP"),
variable.name = "Sample")
ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600")
ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))
ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=factor(c(0,2,3,4,5,6,7,8,9,10)))
ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))
ExportPlot <- function(gplot, filename, width=2, height=1.5) {
# Export plot in PDF and EPS.
# Notice that A4: width=11.69, height=8.27
ggsave(paste(filename, '.pdf', sep=""), gplot, width = width, height = height)
postscript(file = paste(filename, '.eps', sep=""), width = width, height = height, family = "sans")
print(gplot)
dev.off()
png(file = paste(filename, '_.png', sep=""), width = width * 100, height = height * 100)
print(gplot)
dev.off()
}
ExportPlot(gc.plot,filename = "~/Desktop/HollyGCPlot")
ExportPlot(gc.plot,filename = "~/Desktop/HollyGCPlot", width=6, height=6)
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))+
scale_color_discrete(labels=c("540-0","540-4AP","540-4BP"),breaks=c("X540.0","X540.4AP","X540.4BP"))
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))+
scale_color_discrete(labels=c("540-0","540-4AP","540-4BP"),breaks=c("X540.0","X540.4AP","X540.4BP"))
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))+
scale_color_discrete(labels=c("540-0","540-4AP","540-4BP"),breaks=c("X540.0","X540.4AP","X540.4BP"),
values=c("red","orange","purple"))
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))+
scale_color_discrete(name = "Sample",labels=c("540-0","540-4AP","540-4BP"))
gc.plot
ExportPlot(gc.plot,filename = "~/Desktop/HollyGCPlot", width=6, height=6)
gc.plot
gc.plot
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))+
scale_color_discrete(name = "Sample",labels=c("540-0","540-4AP","540-4BP"),
colors=c("purple","dodgerblue","orange"))
gc.plot
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))+
scale_color_manual(name = "Sample",labels=c("540-0","540-4AP","540-4BP"),
colors=c("purple","dodgerblue","orange"), breaks=c("540-0","540-4AP","540-4BP"))
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))+
scale_color_discrete(name = "Sample",labels=c("540-0","540-4AP","540-4BP"),
values=c("purple","dodgerblue","orange"), breaks=c("540-0","540-4AP","540-4BP"))
gc.plot
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))+
scale_color_manual(name = "Sample",labels=c("540-0","540-4AP","540-4BP"),
values=c("purple","dodgerblue","orange"), breaks=c("540-0","540-4AP","540-4BP"))
gc.plot
gc.plot <- ggplot(data=strain540.melt) + geom_point(mapping=aes(x=Day,y=value,color=Sample),size=3) +
geom_line(mapping=aes(x=Day,y=value,color=Sample),size=1) +
theme_minimal() + ylab("OD600") + scale_x_discrete(limits=c(0,2,3,4,5,6,7,8,9,10))+
scale_color_manual(name = "Sample",labels=c("540-0","540-4AP","540-4BP"),
values=c("purple","dodgerblue","orange"), breaks=c("X540.0","X540.4AP","X540.4BP"))
gc.plot
View(strain540.melt)
library(ggpubr)
gc.plot2 <- gc.plot
ggarrange(gc.plot,gc.plot2, labels=c("A","B"))
require(ggplot2)
require(ggtree)
tre <- read.newick("~/Desktop/Pepperell/saprophyticus/2019.05.16_saproRoaryScoary/roary/05.16_mafft_fasttree.newick")
require(treeio)
tre <- read.newick("~/Desktop/Pepperell/saprophyticus/2019.05.16_saproRoaryScoary/roary/05.16_mafft_fasttree.newick")
# plot tree
r <- ggtree(tre,layout = "rectangular", size = 0.5); r
# add tips and labels
s <-  r %<+% dat +
geom_tiplab(color="black",size=2, offset=.0001) +
geom_tippoint(color="black",size=1.5)
# add tips and labels
s <-  r %<+% +
geom_tiplab(color="black",size=2, offset=.0001) +
geom_tippoint(color="black",size=1.5)
# add tips and labels
s <-  r +
geom_tiplab(color="black",size=2, offset=.0001) +
geom_tippoint(color="black",size=1.5); s
require(DESeq2)
packageVersion()
packageVersion(DESeq2)
packageVersion("DESeq2"")
packageVersion("DESeq2")
require(DESeq2)
require(dplyr)
require(ggplot2)
require(vsn)
require(RColorBrewer)
require(pheatmap)
require(apeglm)
require(genefilter)
require(hexbin)
require(viridis)
require(scatterplot3d)
?rlogTransformation
?results
?p.adjust
library(tidyverse)
library(tidyverse)
library(phangorn)
library(dplyr)
require(ggtree)
require(treeio)
require(cowplot)
require(splitstackshape)
require(viridis)
require(ape)
library(phytools)
library(textreadr)
BiocManager::install("textreadr")
library("ggmap")
BiocManager::install("ggmap")
library("ggmap")
mapWorld <- borders("world",color="lightgrey",fill="grey50")
mapWorld <- borders("world",colour="lightgrey",fill="grey50")
mp <- NULL
mapWorld <- borders("world",colour="lightgrey",fill="grey50")
mp <- ggplot() + mapWorld
mp
locs <- data.frame("location"=c("Wisconsin"),lat=c(44.5),long=c(-89.5),num=c(50))
mp <- mp+ geom_point(locs,aes(x=long, y=lat) ,color="blue", size=3)
mp <- mp+ geom_point(data=locs,aes(x=long, y=lat) ,color="blue", size=3)
mp
mp <- mp+ geom_point(data=locs,aes(x=long, y=lat) ,color="blue", size=3) +theme_bw()
mp
require(ggtree)
setwd("~/Desktop/2022.10.05_saproPGTree/")
tre <- read.newick("accessory_binary_genes.fa.newick")
require(ggplot2)
require(ggtree)
require(cowplot)
require(scales)
require(splitstackshape)
require(reshape2)
require(dplyr)
require(viridis)
require(ape)
require(phytools)
require(phangorn)
library(tidyverse)
require(treeio)
require(seqinr)
tre <- read.newick("accessory_binary_genes.fa.newick")
r <- ggtree(tre,layout = "rectangular", size = 1); r
dat <- fortify(tre)
s <-  r %<+% dat + geom_tiplab(color="black",size=3, offset=.0001) +
geom_treescale(x=0,y=-0.5,width=0.0015,fontsize=3)
s
s <-  r %<+% dat + geom_tiplab(color="black",size=3, offset=.0001) +
geom_treescale(x=0,y=-0.5,width=0.01,fontsize=3)
s
s <-  r %<+% dat + geom_tiplab(color="black",size=3, offset=.0001) +
geom_treescale(x=0,y=-0.5,width=0.1,fontsize=3)
s
setwd("~/Desktop/2022.10.05_saproPGTree/")
tre <- read.newick("accessory_binary_genes.fa.newick")
r <- ggtree(tre,layout = "rectangular", size = 1); r
dat <- fortify(tre)
s <-  r %<+% dat + geom_tiplab(color="black",size=3, offset=.0001) +
geom_treescale(x=0,y=-0.5,width=0.1,fontsize=3)
s
setwd("~/Desktop/2022.10.05_GGI_Revisions/GithubRepo/Figure5/")
fst_sig <- read.delim("ggi_nulWcFst.txt",header=FALSE)
fst_sig <- read.delim("ggi_nullWcFst.txt",header=FALSE)
fst_sig$V1
fst_sig
fst_sig <- read.delim("ggi_nullWcFst.txt",header=T)
fst_sig <- read.delim("ggi_nullWcFst.txt",header=T)
fst_sig
fst_sig$Max[1]
fst_sig <- read.delim("ggi_nullWcFst.txt",header=T)$Max[1]
fst_sig
setwd("~/Desktop/2022.10.05_GGI_Revisions/GithubRepo/Figure5/")
fst_sig <- read.delim("ggi_nullWcFst.txt",header=T)$Max[1]
fst <- read.delim("ggi_wcFst.txt", header = FALSE)
colnames(fst) <- c("seqid","position","targetFreq","backgroundFreq","wcFst")
outliers <- subset(fst, fst$wcFst > fst_sig)
colnames(outliers) <- c("seqid","position","targetFreq","backgroundFreq","wcFst")
#colors
fst_colors <- c("dodgerblue","#0D0887FF")
fstPlot <- ggplot(fst, aes(x=position, y = wcFst)) + geom_point(aes(color="NS"), alpha=0.7, size=2)+
xlab("\nGenome Position") + theme_bw()+
geom_hline(yintercept = fst_sig, linetype = "dashed", color = "red", size = 1)+
geom_point(data = outliers, aes(color = "Sig"), alpha = 0.7, size = 2.2)+
theme(plot.title = element_text(size = 18, face = "bold", color = "grey27", family = "sans"),
axis.text = element_text(color = "grey27", face = "bold", family = "sans", size = 12),
axis.title = element_text(color = "grey27", face = "bold", size = 16, family = "sans"),
legend.position = "bottom", legend.text = element_text(size = 12, color = "grey27", family = "sans"))+
scale_color_manual(name = NULL, values = c(fst_colors), labels = c("Not Significant", "Significant"),
breaks = c("NS", "Sig"))+
scale_x_continuous(labels=comma)
fstPlot
homo <- read.delim("all_gc_homoplasies.txt",header=F)
quantile(homo$V2,c(.90,.95,.99))
homo_outliers <- subset(homo, homo$V2 > 16)
homo_fst <- subset(fst, fst$position %in% homo_outliers$V1)
fst_colors <- c("lightgrey","black","red")
fstPlot <- ggplot(fst, aes(x=position, y = wcFst)) + geom_point(aes(color="NS"), alpha=0.7, size=2)+
xlab("\nGenome Position") + theme_bw()+
geom_hline(yintercept = fst_sig, linetype = "dashed", color = "red", size = 1)+
geom_point(data = outliers, aes(color = "Sig"), alpha = 0.7, size = 2.2)+
geom_point(data = homo_fst, aes(color = "Homo"), alpha = 1, size = 2.2)+
theme(plot.title = element_text(size = 18, face = "bold", color = "grey27", family = "sans"),
axis.text = element_text(color = "grey27", face = "bold", family = "sans", size = 12),
axis.title = element_text(color = "grey27", face = "bold", size = 16, family = "sans"),
legend.position = "bottom", legend.text = element_text(size = 12, color = "grey27", family = "sans"))+
scale_color_manual(name = NULL, values = c(fst_colors), labels = c("NS Fst", "Sig Fst", "95th percentile Homoplasy"),
breaks = c("NS", "Sig","Homo"))+
scale_x_continuous(labels=comma)
fstPlot
require(dplyr)
View(fst)
# read homoplasy data from all core genome homoplasies (ie mutations that occured >= 2 on the phylogeny)
homo <- read.delim("all_gc_homoplasies.txt")
# find what homoplasy multiplicity is at the 90th, 95th and 99th percentile
quantile(homo$mutationMultiplicity,c(.90,.95,.99))
quantile(homo$mutationMultiplicity,0.95)
typeof(quantile(homo$mutationMultiplicity,0.95))
# make separate df for homoplasies in or above the 95th percentile
homo_outliers <- subset(homo, homo$mutationMultiplicity > quantile(homo$mutationMultiplicity,0.95))
View(homo_outliers)
# maximum of null distribution = significance cutoff
fst_sig <- read.delim("ggi_nullWcFst.txt",header=T)$Max[1]
# read fst data for all SNPs in core genome
fst <- read.delim("ggi_wcFst.txt", header = FALSE)
colnames(fst) <- c("seqid","position","targetFreq","backgroundFreq","wcFst")
# read homoplasy data from all core genome homoplasies (ie mutations that occured >= 2 on the phylogeny)
homo <- read.delim("all_gc_homoplasies.txt")
# make separate df for homoplasies in or above the 95th percentile
homo_outliers <- subset(homo, homo$mutationMultiplicity > quantile(homo$mutationMultiplicity,0.95))
# dataframe combining fst values for homoplasy outliers
fst <- fst %>% mutate(sig = case_when(position %in% homo_outliers$position ~ "homo",
wcFst > fst_sig ~ "Sig",
wcFst < fst_sig ~ "NS"))
# manhattan plot with significant fst ouliers colored in black and homoplasies colored in red
fstPlot <- ggplot(fst, aes(x=position, y = wcFst)) + geom_point(aes(color=sig), alpha=0.7, size=2)+
xlab("\nGenome Position") + theme_bw()+
geom_hline(yintercept = fst_sig, linetype = "dashed", color = "red", size = 1)+
theme(plot.title = element_text(size = 18, face = "bold", color = "grey27", family = "sans"),
axis.text = element_text(color = "grey27", face = "bold", family = "sans", size = 12),
axis.title = element_text(color = "grey27", face = "bold", size = 16, family = "sans"),
legend.position = "bottom", legend.text = element_text(size = 12, color = "grey27", family = "sans"))+
scale_color_manual(name = NULL, values = c(fst_colors), labels = c("NS Fst", "Sig Fst", "95th percentile Homoplasy"),
breaks = c("NS", "Sig","Homo"))+
scale_x_continuous(labels=comma)
fstPlot
# manhattan plot with significant fst ouliers colored in black and homoplasies colored in red
fstPlot <- ggplot(fst, aes(x=position, y = wcFst)) + geom_point(aes(color=sig), alpha=0.7, size=2)+
xlab("\nGenome Position") + theme_bw()+
geom_hline(yintercept = fst_sig, linetype = "dashed", color = "red", size = 1)+
theme(plot.title = element_text(size = 18, face = "bold", color = "grey27", family = "sans"),
axis.text = element_text(color = "grey27", face = "bold", family = "sans", size = 12),
axis.title = element_text(color = "grey27", face = "bold", size = 16, family = "sans"),
legend.position = "bottom", legend.text = element_text(size = 12, color = "grey27", family = "sans"))+
scale_color_manual(name = NULL, values = c(fst_colors), labels = c("NS Fst", "Sig Fst", "95th percentile Homoplasy"),
breaks = c("NS", "sig","homo"))+
scale_x_continuous(labels=comma)
fstPlot
levels(factor(fst$sig))
# dataframe combining fst values for homoplasy outliers
fst <- fst %>% mutate(sig = case_when(position %in% homo_outliers$position ~ "homo",
wcFst > fst_sig ~ "sig",
wcFst < fst_sig ~ "NS"))
# plot colors
fst_colors <- c("lightgrey","black","red")
# manhattan plot with significant fst ouliers colored in black and homoplasies colored in red
fstPlot <- ggplot(fst, aes(x=position, y = wcFst)) + geom_point(aes(color=sig), alpha=0.7, size=2)+
xlab("\nGenome Position") + theme_bw()+
geom_hline(yintercept = fst_sig, linetype = "dashed", color = "red", size = 1)+
theme(plot.title = element_text(size = 18, face = "bold", color = "grey27", family = "sans"),
axis.text = element_text(color = "grey27", face = "bold", family = "sans", size = 12),
axis.title = element_text(color = "grey27", face = "bold", size = 16, family = "sans"),
legend.position = "bottom", legend.text = element_text(size = 12, color = "grey27", family = "sans"))+
scale_color_manual(name = NULL, values = fst_colors, labels = c("NS Fst", "Sig Fst", "95th percentile Homoplasy"),
breaks = c("NS", "sig","homo"))+
scale_x_continuous(labels=comma)
fstPlot
# dataframe combining fst values for homoplasy outliers
fst <- fst %>% mutate(sig = case_when(position %in% homo_outliers$position ~ "zhomo",
wcFst > fst_sig ~ "sig",
wcFst < fst_sig ~ "NS"))
# dataframe combining fst values for homoplasy outliers
fst <- fst %>% mutate(sig = case_when(position %in% homo_outliers$position ~ "zhomo",
wcFst > fst_sig ~ "sig",
wcFst < fst_sig ~ "NS")) %>%
arrange(sig)
levels(factor(fst$sig))
levels(fst$sig)
# plot colors
fst_colors <- c("lightgrey","black","red")
# manhattan plot with significant fst ouliers colored in black and homoplasies colored in red
fstPlot <- ggplot(fst, aes(x=position, y = wcFst)) + geom_point(aes(color=sig), alpha=0.7, size=2)+
xlab("\nGenome Position") + theme_bw()+
geom_hline(yintercept = fst_sig, linetype = "dashed", color = "red", size = 1)+
theme(plot.title = element_text(size = 18, face = "bold", color = "grey27", family = "sans"),
axis.text = element_text(color = "grey27", face = "bold", family = "sans", size = 12),
axis.title = element_text(color = "grey27", face = "bold", size = 16, family = "sans"),
legend.position = "bottom", legend.text = element_text(size = 12, color = "grey27", family = "sans"))+
scale_color_manual(name = NULL, values = fst_colors, labels = c("NS Fst", "Sig Fst", "95th percentile Homoplasy"),
breaks = c("NS", "sig","zhomo"))+
scale_x_continuous(labels=comma)
fstPlot
# GGI
Scripts and data associated with Figures 5-8 of GGI manuscript.
Working title: "The Gonococcal Genetic Island defines distinct sub-populations of Neisseria gonorrhoeae"
